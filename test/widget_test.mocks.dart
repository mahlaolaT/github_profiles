// Mocks generated by Mockito 5.4.5 from annotations
// in github_profiles/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:github_profiles/api/client/github_client.dart' as _i2;
import 'package:github_profiles/api/model/github_repo.dart' as _i7;
import 'package:github_profiles/api/model/github_search.dart' as _i3;
import 'package:github_profiles/api/model/github_user_details.dart' as _i4;
import 'package:github_profiles/api/service/github_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGithubClient_0 extends _i1.SmartFake implements _i2.GithubClient {
  _FakeGithubClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGithubSearch_1 extends _i1.SmartFake implements _i3.GithubSearch {
  _FakeGithubSearch_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGithubUserDetails_2 extends _i1.SmartFake
    implements _i4.GithubUserDetails {
  _FakeGithubUserDetails_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GithubService].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubService extends _i1.Mock implements _i5.GithubService {
  MockGithubService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GithubClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeGithubClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.GithubClient);

  @override
  _i6.FutureOr<_i3.GithubSearch> searchUsers(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchUsers,
          [query],
        ),
        returnValue: _i6.Future<_i3.GithubSearch>.value(_FakeGithubSearch_1(
          this,
          Invocation.method(
            #searchUsers,
            [query],
          ),
        )),
      ) as _i6.FutureOr<_i3.GithubSearch>);

  @override
  _i6.Future<_i4.GithubUserDetails> getUserDetails(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserDetails,
          [username],
        ),
        returnValue:
            _i6.Future<_i4.GithubUserDetails>.value(_FakeGithubUserDetails_2(
          this,
          Invocation.method(
            #getUserDetails,
            [username],
          ),
        )),
      ) as _i6.Future<_i4.GithubUserDetails>);

  @override
  _i6.Future<List<_i7.GitHubRepository>> getUserRepos(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserRepos,
          [username],
        ),
        returnValue: _i6.Future<List<_i7.GitHubRepository>>.value(
            <_i7.GitHubRepository>[]),
      ) as _i6.Future<List<_i7.GitHubRepository>>);
}
